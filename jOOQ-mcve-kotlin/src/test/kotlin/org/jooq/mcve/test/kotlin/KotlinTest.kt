package org.jooq.mcve.test.kotlin

import org.jooq.DSLContext
import org.jooq.impl.DSL
import org.jooq.mcve.kotlin.tables.records.AddressRecord
import org.jooq.mcve.kotlin.tables.records.CustomerRecord
import org.jooq.mcve.kotlin.tables.records.FilmRecord
import org.jooq.mcve.kotlin.tables.records.StaffRecord
import org.jooq.mcve.kotlin.tables.references.*
import org.junit.After
import org.junit.Before
import org.junit.Test
import java.sql.DriverManager

class KotlinTest {

    var connection: java.sql.Connection? = null
    var ctx: DSLContext? = null

    @Before
    fun setup() {
        // postgresql://localhost/sakila?user=postgres&password=postgres
        connection = DriverManager.getConnection("jdbc:postgresql://localhost/sakila", "postgres", "postgres")
        ctx = DSL.using(connection)
        //ctx().delete(TEST).execute()
    }

    @After
    fun after() {
        ctx = null
        connection!!.close()
        connection = null
    }

    fun jooq(): DSLContext = ctx!!

//    @Test
//    fun mcveTest() {
//        assertEquals(1, ctx()
//            .insertInto(TEST)
//            .columns(TEST.CD)
//            .values(42)
//            .execute()
//        )
//
//        val record = ctx().fetchOne(TEST, TEST.CD.eq(42))
//        assertNotNull(record?.id)
//    }

    @Test
    fun selectTestFetchArray() {
        jooq().select().from(ADDRESS)
            .leftJoin(CUSTOMER).on(CUSTOMER.ADDRESS_ID.eq(ADDRESS.ADDRESS_ID))
            .leftJoin(STAFF).on(STAFF.ADDRESS_ID.eq(ADDRESS.ADDRESS_ID))
            .fetchArray(ADDRESS.ADDRESS_ID).toList()
    }

    @Test
    fun selectFieldsFromJoinedTables() {
        val result = jooq()
            .select(CUSTOMER.CUSTOMER_ID, CUSTOMER.EMAIL, ADDRESS.ADDRESS_)
//            .select(CUSTOMER.EMAIL)
//            .select(ADDRESS.ADDRESS_)
            .from(ADDRESS)
            .leftJoin(CUSTOMER).on(CUSTOMER.ADDRESS_ID.eq(ADDRESS.ADDRESS_ID))
            .where(
                ADDRESS.ADDRESS_ID.`in`(
                    4, // not joined to customer
                    5 // joined to customer
                )
            )
            .fetch {
                AddressWithCustomerEmail(
                    customerId = it.getValue(CUSTOMER.CUSTOMER_ID),
                    customerEmail = it.getValue(CUSTOMER.EMAIL),
                    address = it.getValue(ADDRESS.ADDRESS_)
                )
            }

        result.forEach { println(it) }
    }

    @Test
    fun selectFilmByLanguage() {
        val result: Map<String?, MutableList<FilmRecord>> = jooq()
            .select()
            .from(LANGUAGE)
            .join(FILM).on(FILM.LANGUAGE_ID.eq(LANGUAGE.LANGUAGE_ID))
            .fetchGroups(LANGUAGE.NAME, FILM.recordType)

        result.keys.forEach { println(it) }
    }

    data class AddressWithCustomerEmail(
        val customerId: Long?,
        val customerEmail: String?,
        val address: String?
    )
}