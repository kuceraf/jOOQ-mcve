/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.Rental


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class RentalRecord() : UpdatableRecordImpl<RentalRecord>(Rental.RENTAL), Record7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> {

    var rentalId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var rentalDate: LocalDateTime?
        set(value): Unit = set(1, value)
        get(): LocalDateTime? = get(1) as LocalDateTime?

    var inventoryId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    var customerId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    var returnDate: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    var staffId: Long?
        set(value): Unit = set(5, value)
        get(): Long? = get(5) as Long?

    var lastUpdate: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> = super.fieldsRow() as Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?>
    override fun valuesRow(): Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?> = super.valuesRow() as Row7<Long?, LocalDateTime?, Long?, Long?, LocalDateTime?, Long?, LocalDateTime?>
    override fun field1(): Field<Long?> = Rental.RENTAL.RENTAL_ID
    override fun field2(): Field<LocalDateTime?> = Rental.RENTAL.RENTAL_DATE
    override fun field3(): Field<Long?> = Rental.RENTAL.INVENTORY_ID
    override fun field4(): Field<Long?> = Rental.RENTAL.CUSTOMER_ID
    override fun field5(): Field<LocalDateTime?> = Rental.RENTAL.RETURN_DATE
    override fun field6(): Field<Long?> = Rental.RENTAL.STAFF_ID
    override fun field7(): Field<LocalDateTime?> = Rental.RENTAL.LAST_UPDATE
    override fun component1(): Long? = rentalId
    override fun component2(): LocalDateTime? = rentalDate
    override fun component3(): Long? = inventoryId
    override fun component4(): Long? = customerId
    override fun component5(): LocalDateTime? = returnDate
    override fun component6(): Long? = staffId
    override fun component7(): LocalDateTime? = lastUpdate
    override fun value1(): Long? = rentalId
    override fun value2(): LocalDateTime? = rentalDate
    override fun value3(): Long? = inventoryId
    override fun value4(): Long? = customerId
    override fun value5(): LocalDateTime? = returnDate
    override fun value6(): Long? = staffId
    override fun value7(): LocalDateTime? = lastUpdate

    override fun value1(value: Long?): RentalRecord {
        this.rentalId = value
        return this
    }

    override fun value2(value: LocalDateTime?): RentalRecord {
        this.rentalDate = value
        return this
    }

    override fun value3(value: Long?): RentalRecord {
        this.inventoryId = value
        return this
    }

    override fun value4(value: Long?): RentalRecord {
        this.customerId = value
        return this
    }

    override fun value5(value: LocalDateTime?): RentalRecord {
        this.returnDate = value
        return this
    }

    override fun value6(value: Long?): RentalRecord {
        this.staffId = value
        return this
    }

    override fun value7(value: LocalDateTime?): RentalRecord {
        this.lastUpdate = value
        return this
    }

    override fun values(value1: Long?, value2: LocalDateTime?, value3: Long?, value4: Long?, value5: LocalDateTime?, value6: Long?, value7: LocalDateTime?): RentalRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised RentalRecord
     */
    constructor(rentalId: Long? = null, rentalDate: LocalDateTime? = null, inventoryId: Long? = null, customerId: Long? = null, returnDate: LocalDateTime? = null, staffId: Long? = null, lastUpdate: LocalDateTime? = null): this() {
        this.rentalId = rentalId
        this.rentalDate = rentalDate
        this.inventoryId = inventoryId
        this.customerId = customerId
        this.returnDate = returnDate
        this.staffId = staffId
        this.lastUpdate = lastUpdate
    }
}
