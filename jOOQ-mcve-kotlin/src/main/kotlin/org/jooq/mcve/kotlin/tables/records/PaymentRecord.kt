/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import java.math.BigDecimal
import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.Payment


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentRecord() : UpdatableRecordImpl<PaymentRecord>(Payment.PAYMENT), Record6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> {

    var paymentId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var customerId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var staffId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    var rentalId: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    var amount: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    var paymentDate: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> = super.fieldsRow() as Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?>
    override fun valuesRow(): Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?> = super.valuesRow() as Row6<Long?, Long?, Long?, Long?, BigDecimal?, LocalDateTime?>
    override fun field1(): Field<Long?> = Payment.PAYMENT.PAYMENT_ID
    override fun field2(): Field<Long?> = Payment.PAYMENT.CUSTOMER_ID
    override fun field3(): Field<Long?> = Payment.PAYMENT.STAFF_ID
    override fun field4(): Field<Long?> = Payment.PAYMENT.RENTAL_ID
    override fun field5(): Field<BigDecimal?> = Payment.PAYMENT.AMOUNT
    override fun field6(): Field<LocalDateTime?> = Payment.PAYMENT.PAYMENT_DATE
    override fun component1(): Long? = paymentId
    override fun component2(): Long? = customerId
    override fun component3(): Long? = staffId
    override fun component4(): Long? = rentalId
    override fun component5(): BigDecimal? = amount
    override fun component6(): LocalDateTime? = paymentDate
    override fun value1(): Long? = paymentId
    override fun value2(): Long? = customerId
    override fun value3(): Long? = staffId
    override fun value4(): Long? = rentalId
    override fun value5(): BigDecimal? = amount
    override fun value6(): LocalDateTime? = paymentDate

    override fun value1(value: Long?): PaymentRecord {
        this.paymentId = value
        return this
    }

    override fun value2(value: Long?): PaymentRecord {
        this.customerId = value
        return this
    }

    override fun value3(value: Long?): PaymentRecord {
        this.staffId = value
        return this
    }

    override fun value4(value: Long?): PaymentRecord {
        this.rentalId = value
        return this
    }

    override fun value5(value: BigDecimal?): PaymentRecord {
        this.amount = value
        return this
    }

    override fun value6(value: LocalDateTime?): PaymentRecord {
        this.paymentDate = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Long?, value5: BigDecimal?, value6: LocalDateTime?): PaymentRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised PaymentRecord
     */
    constructor(paymentId: Long? = null, customerId: Long? = null, staffId: Long? = null, rentalId: Long? = null, amount: BigDecimal? = null, paymentDate: LocalDateTime? = null): this() {
        this.paymentId = paymentId
        this.customerId = customerId
        this.staffId = staffId
        this.rentalId = rentalId
        this.amount = amount
        this.paymentDate = paymentDate
    }
}
