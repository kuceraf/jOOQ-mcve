/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.references


import java.math.BigDecimal

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result
import org.jooq.mcve.kotlin.tables.Actor
import org.jooq.mcve.kotlin.tables.ActorInfo
import org.jooq.mcve.kotlin.tables.Address
import org.jooq.mcve.kotlin.tables.Category
import org.jooq.mcve.kotlin.tables.City
import org.jooq.mcve.kotlin.tables.Country
import org.jooq.mcve.kotlin.tables.Customer
import org.jooq.mcve.kotlin.tables.CustomerList
import org.jooq.mcve.kotlin.tables.Film
import org.jooq.mcve.kotlin.tables.FilmActor
import org.jooq.mcve.kotlin.tables.FilmCategory
import org.jooq.mcve.kotlin.tables.FilmInStock
import org.jooq.mcve.kotlin.tables.FilmList
import org.jooq.mcve.kotlin.tables.FilmNotInStock
import org.jooq.mcve.kotlin.tables.FlywaySchemaHistory
import org.jooq.mcve.kotlin.tables.Inventory
import org.jooq.mcve.kotlin.tables.Language
import org.jooq.mcve.kotlin.tables.NicerButSlowerFilmList
import org.jooq.mcve.kotlin.tables.Payment
import org.jooq.mcve.kotlin.tables.PaymentP2007_01
import org.jooq.mcve.kotlin.tables.PaymentP2007_02
import org.jooq.mcve.kotlin.tables.PaymentP2007_03
import org.jooq.mcve.kotlin.tables.PaymentP2007_04
import org.jooq.mcve.kotlin.tables.PaymentP2007_05
import org.jooq.mcve.kotlin.tables.PaymentP2007_06
import org.jooq.mcve.kotlin.tables.Rental
import org.jooq.mcve.kotlin.tables.RewardsReport
import org.jooq.mcve.kotlin.tables.SalesByFilmCategory
import org.jooq.mcve.kotlin.tables.SalesByStore
import org.jooq.mcve.kotlin.tables.Staff
import org.jooq.mcve.kotlin.tables.StaffList
import org.jooq.mcve.kotlin.tables.Store
import org.jooq.mcve.kotlin.tables.records.FilmInStockRecord
import org.jooq.mcve.kotlin.tables.records.FilmNotInStockRecord
import org.jooq.mcve.kotlin.tables.records.RewardsReportRecord



/**
 * The table <code>public.actor</code>.
 */
val ACTOR: Actor = Actor.ACTOR

/**
 * The table <code>public.actor_info</code>.
 */
val ACTOR_INFO: ActorInfo = ActorInfo.ACTOR_INFO

/**
 * The table <code>public.address</code>.
 */
val ADDRESS: Address = Address.ADDRESS

/**
 * The table <code>public.category</code>.
 */
val CATEGORY: Category = Category.CATEGORY

/**
 * The table <code>public.city</code>.
 */
val CITY: City = City.CITY

/**
 * The table <code>public.country</code>.
 */
val COUNTRY: Country = Country.COUNTRY

/**
 * The table <code>public.customer</code>.
 */
val CUSTOMER: Customer = Customer.CUSTOMER

/**
 * The table <code>public.customer_list</code>.
 */
val CUSTOMER_LIST: CustomerList = CustomerList.CUSTOMER_LIST

/**
 * The table <code>public.film</code>.
 */
val FILM: Film = Film.FILM

/**
 * The table <code>public.film_actor</code>.
 */
val FILM_ACTOR: FilmActor = FilmActor.FILM_ACTOR

/**
 * The table <code>public.film_category</code>.
 */
val FILM_CATEGORY: FilmCategory = FilmCategory.FILM_CATEGORY

/**
 * The table <code>public.film_in_stock</code>.
 */
val FILM_IN_STOCK: FilmInStock = FilmInStock.FILM_IN_STOCK

/**
 * Call <code>public.film_in_stock</code>.
 */
fun FILM_IN_STOCK(
      configuration: Configuration
    , pFilmId: Long?
    , pStoreId: Long?
): Result<FilmInStockRecord> = configuration.dsl().selectFrom(org.jooq.mcve.kotlin.tables.FilmInStock.FILM_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun FILM_IN_STOCK(
      pFilmId: Long?
    , pStoreId: Long?
): FilmInStock = org.jooq.mcve.kotlin.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun FILM_IN_STOCK(
      pFilmId: Field<Long?>
    , pStoreId: Field<Long?>
): FilmInStock = org.jooq.mcve.kotlin.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * The table <code>public.film_list</code>.
 */
val FILM_LIST: FilmList = FilmList.FILM_LIST

/**
 * The table <code>public.film_not_in_stock</code>.
 */
val FILM_NOT_IN_STOCK: FilmNotInStock = FilmNotInStock.FILM_NOT_IN_STOCK

/**
 * Call <code>public.film_not_in_stock</code>.
 */
fun FILM_NOT_IN_STOCK(
      configuration: Configuration
    , pFilmId: Long?
    , pStoreId: Long?
): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(org.jooq.mcve.kotlin.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun FILM_NOT_IN_STOCK(
      pFilmId: Long?
    , pStoreId: Long?
): FilmNotInStock = org.jooq.mcve.kotlin.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun FILM_NOT_IN_STOCK(
      pFilmId: Field<Long?>
    , pStoreId: Field<Long?>
): FilmNotInStock = org.jooq.mcve.kotlin.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * The table <code>public.flyway_schema_history</code>.
 */
val FLYWAY_SCHEMA_HISTORY: FlywaySchemaHistory = FlywaySchemaHistory.FLYWAY_SCHEMA_HISTORY

/**
 * The table <code>public.inventory</code>.
 */
val INVENTORY: Inventory = Inventory.INVENTORY

/**
 * The table <code>public.language</code>.
 */
val LANGUAGE: Language = Language.LANGUAGE

/**
 * The table <code>public.nicer_but_slower_film_list</code>.
 */
val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

/**
 * The table <code>public.payment</code>.
 */
val PAYMENT: Payment = Payment.PAYMENT

/**
 * The table <code>public.payment_p2007_01</code>.
 */
val PAYMENT_P2007_01: PaymentP2007_01 = PaymentP2007_01.PAYMENT_P2007_01

/**
 * The table <code>public.payment_p2007_02</code>.
 */
val PAYMENT_P2007_02: PaymentP2007_02 = PaymentP2007_02.PAYMENT_P2007_02

/**
 * The table <code>public.payment_p2007_03</code>.
 */
val PAYMENT_P2007_03: PaymentP2007_03 = PaymentP2007_03.PAYMENT_P2007_03

/**
 * The table <code>public.payment_p2007_04</code>.
 */
val PAYMENT_P2007_04: PaymentP2007_04 = PaymentP2007_04.PAYMENT_P2007_04

/**
 * The table <code>public.payment_p2007_05</code>.
 */
val PAYMENT_P2007_05: PaymentP2007_05 = PaymentP2007_05.PAYMENT_P2007_05

/**
 * The table <code>public.payment_p2007_06</code>.
 */
val PAYMENT_P2007_06: PaymentP2007_06 = PaymentP2007_06.PAYMENT_P2007_06

/**
 * The table <code>public.rental</code>.
 */
val RENTAL: Rental = Rental.RENTAL

/**
 * The table <code>public.rewards_report</code>.
 */
val REWARDS_REPORT: RewardsReport = RewardsReport.REWARDS_REPORT

/**
 * Call <code>public.rewards_report</code>.
 */
fun REWARDS_REPORT(
      configuration: Configuration
    , minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): Result<RewardsReportRecord> = configuration.dsl().selectFrom(org.jooq.mcve.kotlin.tables.RewardsReport.REWARDS_REPORT.call(
      minMonthlyPurchases
    , minDollarAmountPurchased
)).fetch()

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun REWARDS_REPORT(
      minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): RewardsReport = org.jooq.mcve.kotlin.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun REWARDS_REPORT(
      minMonthlyPurchases: Field<Int?>
    , minDollarAmountPurchased: Field<BigDecimal?>
): RewardsReport = org.jooq.mcve.kotlin.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)

/**
 * The table <code>public.sales_by_film_category</code>.
 */
val SALES_BY_FILM_CATEGORY: SalesByFilmCategory = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

/**
 * The table <code>public.sales_by_store</code>.
 */
val SALES_BY_STORE: SalesByStore = SalesByStore.SALES_BY_STORE

/**
 * The table <code>public.staff</code>.
 */
val STAFF: Staff = Staff.STAFF

/**
 * The table <code>public.staff_list</code>.
 */
val STAFF_LIST: StaffList = StaffList.STAFF_LIST

/**
 * The table <code>public.store</code>.
 */
val STORE: Store = Store.STORE
