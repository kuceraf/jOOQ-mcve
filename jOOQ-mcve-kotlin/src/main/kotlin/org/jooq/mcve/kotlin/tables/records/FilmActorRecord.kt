/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.kotlin.tables.records


import java.time.LocalDateTime

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.jooq.mcve.kotlin.tables.FilmActor


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class FilmActorRecord() : UpdatableRecordImpl<FilmActorRecord>(FilmActor.FILM_ACTOR), Record3<Long?, Long?, LocalDateTime?> {

    var actorId: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    var filmId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    var lastUpdate: LocalDateTime?
        set(value): Unit = set(2, value)
        get(): LocalDateTime? = get(2) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Long?, Long?> = super.key() as Record2<Long?, Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, LocalDateTime?> = super.fieldsRow() as Row3<Long?, Long?, LocalDateTime?>
    override fun valuesRow(): Row3<Long?, Long?, LocalDateTime?> = super.valuesRow() as Row3<Long?, Long?, LocalDateTime?>
    override fun field1(): Field<Long?> = FilmActor.FILM_ACTOR.ACTOR_ID
    override fun field2(): Field<Long?> = FilmActor.FILM_ACTOR.FILM_ID
    override fun field3(): Field<LocalDateTime?> = FilmActor.FILM_ACTOR.LAST_UPDATE
    override fun component1(): Long? = actorId
    override fun component2(): Long? = filmId
    override fun component3(): LocalDateTime? = lastUpdate
    override fun value1(): Long? = actorId
    override fun value2(): Long? = filmId
    override fun value3(): LocalDateTime? = lastUpdate

    override fun value1(value: Long?): FilmActorRecord {
        this.actorId = value
        return this
    }

    override fun value2(value: Long?): FilmActorRecord {
        this.filmId = value
        return this
    }

    override fun value3(value: LocalDateTime?): FilmActorRecord {
        this.lastUpdate = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: LocalDateTime?): FilmActorRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised FilmActorRecord
     */
    constructor(actorId: Long? = null, filmId: Long? = null, lastUpdate: LocalDateTime? = null): this() {
        this.actorId = actorId
        this.filmId = filmId
        this.lastUpdate = lastUpdate
    }
}
